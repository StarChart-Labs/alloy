plugins {
    id 'org.starchartlabs.flare.multi-module-library' version '2.0.0'
    id 'com.autonomousapps.dependency-analysis' version '0.46.0'
}

allprojects {
    apply plugin: 'eclipse'

    // Always download sources, to allow debugging
    eclipse {
        classpath {
            downloadSources = true
        }
    }

    repositories {
        mavenCentral()
    }
    
    check.dependsOn buildHealth
}

// Exclude the platform project from generalized setup
configure(subprojects.findAll { it.name != 'gradle-platform' }) {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    
    dependencies {
        implementation platform(project(':gradle-platform'))
    }
    
    projectMetaData {
        github {
            repository 'StarChart-Labs', 'alloy'
        }
        
        licenses {
            mit()
        }
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [ 'checkstyle.config.dir' : rootProject.file('config/checkstyle') ]
        toolVersion = '8.31'
    }
     
    task checkstyleAll{}
     
    tasks.withType(Checkstyle).all { checkstyleTask -> checkstyleAll.dependsOn checkstyleTask }
     
    check.dependsOn checkstyleAll

    // Setup default test behavior, including failure logging
    test {
        useTestNG() {
            useDefaultListeners = true
        }
    }
    
    // Apply module naming to all projects
    // Add LICENSE so it is included in all JARs, as well as dependent licenses, fulfilling the "distributions include license" requirement
    jar {
		manifest {
			attributes("Automatic-Module-Name": "${project.group}.${project.name  - 'alloy-'}".replaceAll("-", "."))
		}
	}
    
    tasks.withType(Jar).all {
        from("${rootDir}"){
            include 'LICENSE'
        }
        
        from("${rootDir}/dependent-licenses")
    }

	publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                
                repositories {
                    // If not a remote run, publish to local only
                    if(!project.hasProperty('remoteDeploy')){
                        mavenLocal()
                        
                        project.logger.lifecycle('Configured for local publishing')
                    }else{
                        maven {
                            if(!version.endsWith("SNAPSHOT")){
                                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                                
                                project.logger.lifecycle('Configured for release publishing')
                            }else{
                                url "https://oss.sonatype.org/content/repositories/snapshots/"
                                
                                project.logger.lifecycle('Configured for snapshot publishing')
                            }
                            
                            credentials {
                                username System.getenv("OSSRH_USERNAME")
                                password System.getenv("OSSRH_PASSWORD")
                            }
                        }
                    }
                }
            }
        }
    }
    
    signing {
        required { project.hasProperty('remoteDeploy') || project.hasProperty('sign') }
        
        useInMemoryPgpKeys(System.getenv("OSSRH_SIGNING_KEY"), System.getenv("OSSRH_SIGNING_PASSWORD"))
    
        sign publishing.publications.maven
    }
    
    // If not a remote run, publish to local only
    if(!project.hasProperty('remoteDeploy')){
        publishing {
            repositories {
                mavenLocal()
            }
        }
    }
    
}


